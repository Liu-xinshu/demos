/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-92bd3539","./Cartesian2-8fa798b8","./defineProperties-ae15c9d5","./objectToQuery-2e382d4d","./Transforms-c1305e13","./RuntimeError-d5522ee3","./WebGLConstants-554ddbe2","./ComponentDatatype-569c1e3e","./GeometryAttribute-7f79e7d6","./when-c208a7cf","./GeometryAttributes-c3465b51","./IndexDatatype-7119db15","./IntersectionTests-0268f2ee","./Plane-c6867c84","./ArcType-c72d871a","./EllipsoidRhumbLine-fb5cc30d","./EllipsoidGeodesic-b8e7c0c6","./PolylinePipeline-15ee8ac6","./Color-c6da1cc9"],function(S,e,o,c,I,O,r,t,R,a,l,M,U,i,N,F,n,s,j,d,p,z,H){"use strict";function W(e,o,r,t,a,l,i){var n,s=z.PolylinePipeline.numberOfPoints(e,o,a),d=r.red,p=r.green,c=r.blue,f=r.alpha,y=t.red,u=t.green,h=t.blue,C=t.alpha;if(H.Color.equals(r,t)){for(n=0;n<s;n++)l[i++]=H.Color.floatToByte(d),l[i++]=H.Color.floatToByte(p),l[i++]=H.Color.floatToByte(c),l[i++]=H.Color.floatToByte(f);return i}var T=(y-d)/s,g=(u-p)/s,m=(h-c)/s,v=(C-f)/s,b=i;for(n=0;n<s;n++)l[b++]=H.Color.floatToByte(d+n*T),l[b++]=H.Color.floatToByte(p+n*g),l[b++]=H.Color.floatToByte(c+n*m),l[b++]=H.Color.floatToByte(f+n*v);return b}function f(e){var o=(e=c.defaultValue(e,c.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,t=c.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=r,this._colorsPerVertex=t,this._arcType=c.defaultValue(e.arcType,j.ArcType.GEODESIC),this._granularity=c.defaultValue(e.granularity,I.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=c.defaultValue(e.ellipsoid,O.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var a=1+o.length*O.Cartesian3.packedLength;a+=S.defined(r)?1+r.length*H.Color.packedLength:1,this.packedLength=a+O.Ellipsoid.packedLength+3}f.pack=function(e,o,r){var t;r=c.defaultValue(r,0);var a=e._positions,l=a.length;for(o[r++]=l,t=0;t<l;++t,r+=O.Cartesian3.packedLength)O.Cartesian3.pack(a[t],o,r);var i=e._colors;for(l=S.defined(i)?i.length:0,o[r++]=l,t=0;t<l;++t,r+=H.Color.packedLength)H.Color.pack(i[t],o,r);return O.Ellipsoid.pack(e._ellipsoid,o,r),r+=O.Ellipsoid.packedLength,o[r++]=e._colorsPerVertex?1:0,o[r++]=e._arcType,o[r]=e._granularity,o},f.unpack=function(e,o,r){var t;o=c.defaultValue(o,0);var a=e[o++],l=new Array(a);for(t=0;t<a;++t,o+=O.Cartesian3.packedLength)l[t]=O.Cartesian3.unpack(e,o);var i=0<(a=e[o++])?new Array(a):void 0;for(t=0;t<a;++t,o+=H.Color.packedLength)i[t]=H.Color.unpack(e,o);var n=O.Ellipsoid.unpack(e,o);o+=O.Ellipsoid.packedLength;var s=1===e[o++],d=e[o++],p=e[o];return S.defined(r)?(r._positions=l,r._colors=i,r._ellipsoid=n,r._colorsPerVertex=s,r._arcType=d,r._granularity=p,r):new f({positions:l,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:d,granularity:p})};var Y=new Array(2),q=new Array(2),J={positions:Y,height:q,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return f.createGeometry=function(e){var o,r,t,a,l,i=e._positions,n=e._colors,s=e._colorsPerVertex,d=e._arcType,p=e._granularity,c=e._ellipsoid,f=I.CesiumMath.chordLength(p,c.maximumRadius),y=S.defined(n)&&!s,u=i.length,h=0;if(d===j.ArcType.GEODESIC||d===j.ArcType.RHUMB){var C,T,g;g=d===j.ArcType.GEODESIC?(C=I.CesiumMath.chordLength(p,c.maximumRadius),T=z.PolylinePipeline.numberOfPoints,z.PolylinePipeline.generateArc):(C=p,T=z.PolylinePipeline.numberOfPointsRhumbLine,z.PolylinePipeline.generateRhumbArc);var m=z.PolylinePipeline.extractHeights(i,c),v=J;if(d===j.ArcType.GEODESIC?v.minDistance=f:v.granularity=p,v.ellipsoid=c,y){var b=0;for(o=0;o<u-1;o++)b+=T(i[o],i[o+1],C)+1;r=new Float64Array(3*b),a=new Uint8Array(4*b),v.positions=Y,v.height=q;var P=0;for(o=0;o<u-1;++o){Y[0]=i[o],Y[1]=i[o+1],q[0]=m[o],q[1]=m[o+1];var _=g(v);if(S.defined(n)){var B=_.length/3;l=n[o];for(var A=0;A<B;++A)a[P++]=H.Color.floatToByte(l.red),a[P++]=H.Color.floatToByte(l.green),a[P++]=H.Color.floatToByte(l.blue),a[P++]=H.Color.floatToByte(l.alpha)}r.set(_,h),h+=_.length}}else if(v.positions=i,v.height=m,r=new Float64Array(g(v)),S.defined(n)){for(a=new Uint8Array(r.length/3*4),o=0;o<u-1;++o){h=W(i[o],i[o+1],n[o],n[o+1],f,a,h)}var E=n[u-1];a[h++]=H.Color.floatToByte(E.red),a[h++]=H.Color.floatToByte(E.green),a[h++]=H.Color.floatToByte(E.blue),a[h++]=H.Color.floatToByte(E.alpha)}}else{t=y?2*u-2:u,r=new Float64Array(3*t),a=S.defined(n)?new Uint8Array(4*t):void 0;var k=0,G=0;for(o=0;o<u;++o){var w=i[o];if(y&&0<o&&(O.Cartesian3.pack(w,r,k),k+=3,l=n[o-1],a[G++]=H.Color.floatToByte(l.red),a[G++]=H.Color.floatToByte(l.green),a[G++]=H.Color.floatToByte(l.blue),a[G++]=H.Color.floatToByte(l.alpha)),y&&o===u-1)break;O.Cartesian3.pack(w,r,k),k+=3,S.defined(n)&&(l=n[o],a[G++]=H.Color.floatToByte(l.red),a[G++]=H.Color.floatToByte(l.green),a[G++]=H.Color.floatToByte(l.blue),a[G++]=H.Color.floatToByte(l.alpha))}}var D=new N.GeometryAttributes;D.position=new U.GeometryAttribute({componentDatatype:M.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:r}),S.defined(n)&&(D.color=new U.GeometryAttribute({componentDatatype:M.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:a,normalize:!0}));var L=2*((t=r.length/3)-1),V=F.IndexDatatype.createTypedArray(t,L),x=0;for(o=0;o<t-1;++o)V[x++]=o,V[x++]=o+1;return new U.Geometry({attributes:D,indices:V,primitiveType:U.PrimitiveType.LINES,boundingSphere:R.BoundingSphere.fromPoints(i)})},function(e,o){return S.defined(o)&&(e=f.unpack(e,o)),e._ellipsoid=O.Ellipsoid.clone(e._ellipsoid),f.createGeometry(e)}});
