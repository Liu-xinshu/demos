/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-92bd3539","./Cartesian2-8fa798b8","./defineProperties-ae15c9d5","./objectToQuery-2e382d4d","./Transforms-c1305e13","./RuntimeError-d5522ee3","./WebGLConstants-554ddbe2","./ComponentDatatype-569c1e3e","./GeometryAttribute-7f79e7d6","./when-c208a7cf","./GeometryAttributes-c3465b51","./AttributeCompression-4cb3e905","./GeometryPipeline-a3528e40","./EncodedCartesian3-272794dc","./IndexDatatype-7119db15","./IntersectionTests-0268f2ee","./Plane-c6867c84","./VertexFormat-b4c6d1c2","./arrayRemoveDuplicates-1efed288","./BoundingRectangle-328fa973","./EllipsoidTangentPlane-29b9a994","./EllipsoidRhumbLine-fb5cc30d","./PolygonPipeline-b5df6024","./PolylineVolumeGeometryLibrary-f1014cb5","./EllipsoidGeodesic-b8e7c0c6","./PolylinePipeline-15ee8ac6"],function(d,e,t,u,r,y,n,a,A,i,o,D,w,l,R,s,O,p,S,c,m,g,f,h,v,b,B,P,E,_){"use strict";function k(e){var t=(e=u.defaultValue(e,u.defaultValue.EMPTY_OBJECT)).polylinePositions,n=e.shapePositions;this._positions=t,this._shape=n,this._ellipsoid=y.Ellipsoid.clone(u.defaultValue(e.ellipsoid,y.Ellipsoid.WGS84)),this._cornerType=u.defaultValue(e.cornerType,P.CornerType.ROUNDED),this._vertexFormat=g.VertexFormat.clone(u.defaultValue(e.vertexFormat,g.VertexFormat.DEFAULT)),this._granularity=u.defaultValue(e.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var a=1+t.length*y.Cartesian3.packedLength;a+=1+n.length*y.Cartesian2.packedLength,this.packedLength=a+y.Ellipsoid.packedLength+g.VertexFormat.packedLength+2}k.pack=function(e,t,n){var a;n=u.defaultValue(n,0);var r=e._positions,i=r.length;for(t[n++]=i,a=0;a<i;++a,n+=y.Cartesian3.packedLength)y.Cartesian3.pack(r[a],t,n);var o=e._shape;for(i=o.length,t[n++]=i,a=0;a<i;++a,n+=y.Cartesian2.packedLength)y.Cartesian2.pack(o[a],t,n);return y.Ellipsoid.pack(e._ellipsoid,t,n),n+=y.Ellipsoid.packedLength,g.VertexFormat.pack(e._vertexFormat,t,n),n+=g.VertexFormat.packedLength,t[n++]=e._cornerType,t[n]=e._granularity,t};var C=y.Ellipsoid.clone(y.Ellipsoid.UNIT_SPHERE),V=new g.VertexFormat,L={polylinePositions:void 0,shapePositions:void 0,ellipsoid:C,vertexFormat:V,cornerType:void 0,granularity:void 0};k.unpack=function(e,t,n){var a;t=u.defaultValue(t,0);var r=e[t++],i=new Array(r);for(a=0;a<r;++a,t+=y.Cartesian3.packedLength)i[a]=y.Cartesian3.unpack(e,t);r=e[t++];var o=new Array(r);for(a=0;a<r;++a,t+=y.Cartesian2.packedLength)o[a]=y.Cartesian2.unpack(e,t);var l=y.Ellipsoid.unpack(e,t,C);t+=y.Ellipsoid.packedLength;var s=g.VertexFormat.unpack(e,t,V);t+=g.VertexFormat.packedLength;var p=e[t++],c=e[t];return d.defined(n)?(n._positions=i,n._shape=o,n._ellipsoid=y.Ellipsoid.clone(l,n._ellipsoid),n._vertexFormat=g.VertexFormat.clone(s,n._vertexFormat),n._cornerType=p,n._granularity=c,n):(L.polylinePositions=i,L.shapePositions=o,L.cornerType=p,L.granularity=c,new k(L))};var F=new h.BoundingRectangle;return k.createGeometry=function(e){var t=e._positions,n=f.arrayRemoveDuplicates(t,y.Cartesian3.equalsEpsilon),a=e._shape;if(a=P.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(a),!(n.length<2||a.length<3)){B.PolygonPipeline.computeWindingOrder2D(a)===B.WindingOrder.CLOCKWISE&&a.reverse();var r=h.BoundingRectangle.fromPoints(a,F);return function(e,t,n,a){var r=new R.GeometryAttributes;a.position&&(r.position=new w.GeometryAttribute({componentDatatype:D.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var i,o,l,s,p,c,d=t.length,u=e.length/3,y=(u-2*d)/(2*d),m=B.PolygonPipeline.triangulate(t),g=(y-1)*d*6+2*m.length,f=S.IndexDatatype.createTypedArray(u,g),h=2*d,v=0;for(i=0;i<y-1;i++){for(o=0;o<d-1;o++)c=(l=2*o+i*d*2)+h,p=(s=l+1)+h,f[v++]=s,f[v++]=l,f[v++]=p,f[v++]=p,f[v++]=l,f[v++]=c;p=(s=(l=2*d-2+i*d*2)+1)+h,c=l+h,f[v++]=s,f[v++]=l,f[v++]=p,f[v++]=p,f[v++]=l,f[v++]=c}if(a.st||a.tangent||a.bitangent){var b,P,E=new Float32Array(2*u),_=1/(y-1),k=1/n.height,C=n.height/2,V=0;for(i=0;i<y;i++){for(b=i*_,P=k*(t[0].y+C),E[V++]=b,E[V++]=P,o=1;o<d;o++)P=k*(t[o].y+C),E[V++]=b,E[V++]=P,E[V++]=b,E[V++]=P;P=k*(t[0].y+C),E[V++]=b,E[V++]=P}for(o=0;o<d;o++)b=0,P=k*(t[o].y+C),E[V++]=b,E[V++]=P;for(o=0;o<d;o++)b=(y-1)*_,P=k*(t[o].y+C),E[V++]=b,E[V++]=P;r.st=new w.GeometryAttribute({componentDatatype:D.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(E)})}var L=u-2*d;for(i=0;i<m.length;i+=3){var F=m[i]+L,T=m[i+1]+L,G=m[i+2]+L;f[v++]=F,f[v++]=T,f[v++]=G,f[v++]=G+d,f[v++]=T+d,f[v++]=F+d}var x=new w.Geometry({attributes:r,indices:f,boundingSphere:A.BoundingSphere.fromVertices(e),primitiveType:w.PrimitiveType.TRIANGLES});if(a.normal&&(x=O.GeometryPipeline.computeNormal(x)),a.tangent||a.bitangent){try{x=O.GeometryPipeline.computeTangentAndBitangent(x)}catch(e){A.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}a.tangent||(x.attributes.tangent=void 0),a.bitangent||(x.attributes.bitangent=void 0),a.st||(x.attributes.st=void 0)}return x}(P.PolylineVolumeGeometryLibrary.computePositions(n,a,r,e,!0),a,r,e._vertexFormat)}},function(e,t){return d.defined(t)&&(e=k.unpack(e,t)),e._ellipsoid=y.Ellipsoid.clone(e._ellipsoid),k.createGeometry(e)}});
